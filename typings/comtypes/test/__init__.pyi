"""
This type stub file was generated by pyright.
"""

import ctypes
import getopt
import os
import sys
import time
import unittest

use_resources = ...
def register_server(source_dir): # -> None:
    """Register testing server appropriate for the python architecture.

    ``source_dir`` gives the absolute path to the comtype source in which the
    32- and 64-bit testing server, "AvmcIfc.dll" is defined.

    If the server is already registered, do nothing.

    """
    ...

class ResourceDenied(Exception):
    """Test skipped because it requested a disallowed resource.

    This is raised when a test calls requires() for a resource that
    has not be enabled.  Resources are defined by test modules.
    """
    ...


def is_resource_enabled(resource): # -> bool:
    """Test whether a resource is enabled.

    If the caller's module is __main__ then automatically return True."""
    ...

_unavail = ...
def requires(resource, msg=...): # -> None:
    """Raise ResourceDenied if the specified resource is not available.

    If the caller's module is __main__ then automatically return True."""
    ...

def find_package_modules(package, mask): # -> Generator[Any | LiteralString, Any, None]:
    ...

def get_tests(package, mask, verbosity): # -> tuple[list[Any], list[Any]]:
    """Return a list of skipped test modules, and a list of test cases."""
    ...

def usage(): # -> Literal[1]:
    ...

def test_with_refcounts(runner, verbosity, testcase): # -> None:
    """Run testcase several times, tracking reference counts."""
    ...

class TestRunner(unittest.TextTestRunner):
    def run(self, test, skipped): # -> TextTestResult[_WritelnDecorator]:
        "Run the given test case or test suite."
        ...
    


def run_tests(package, mask, verbosity, search_leaks): # -> bool:
    """Run tests for package and return True on failure, False otherwise"""
    ...

class BasicTestRunner:
    def run(self, test): # -> TestResult:
        ...
    


def run(args=...): # -> bool | Literal[1, -1]:
    """Run tests and return True on failure, False otherwise"""
    ...

