"""
This type stub file was generated by pyright.
"""

from ctypes import HRESULT, Structure, _Pointer, c_void_p
from typing import Any, Callable, Optional, TYPE_CHECKING, Type, TypeVar, overload
from comtypes import GUID, hints as hints
from comtypes._post_coinit.unknwn import IUnknown

if TYPE_CHECKING:
    ...
_T_IUnknown = TypeVar("_T_IUnknown", bound=IUnknown)
class IPersist(IUnknown):
    _iid_ = ...
    _idlflags_ = ...
    _methods_ = ...
    if TYPE_CHECKING:
        def GetClassID(self) -> GUID:
            """Returns the CLSID that uniquely represents an object class that
            defines the code that can manipulate the object's data.
            """
            ...
        


class IServiceProvider(IUnknown):
    _iid_ = ...
    _QueryService: Callable[[Any, Any, Any], int]
    def QueryService(self, serviceIID: GUID, interface: Type[_T_IUnknown]) -> _T_IUnknown:
        ...
    
    _methods_ = ...


@overload
def CoGetObject(displayname: str, interface: None) -> IUnknown:
    ...

@overload
def CoGetObject(displayname: str, interface: Type[_T_IUnknown]) -> _T_IUnknown:
    ...

def CoGetObject(displayname: str, interface: Optional[Type[IUnknown]]) -> IUnknown:
    """Convert a displayname to a moniker, then bind and return the object
    identified by the moniker."""
    ...

_pUnkOuter = Type["_Pointer[IUnknown]"]
@overload
def CoCreateInstance(clsid: GUID, interface: None = ..., clsctx: Optional[int] = ..., punkouter: Optional[_pUnkOuter] = ...) -> IUnknown:
    ...

@overload
def CoCreateInstance(clsid: GUID, interface: Type[_T_IUnknown], clsctx: Optional[int] = ..., punkouter: Optional[_pUnkOuter] = ...) -> _T_IUnknown:
    ...

def CoCreateInstance(clsid: GUID, interface: Optional[Type[IUnknown]] = ..., clsctx: Optional[int] = ..., punkouter: Optional[_pUnkOuter] = ...) -> IUnknown:
    """The basic windows api to create a COM class object and return a
    pointer to an interface.
    """
    ...

if TYPE_CHECKING:
    @overload
    def CoGetClassObject(clsid: GUID, clsctx: Optional[int] = ..., pServerInfo: Optional[COSERVERINFO] = ..., interface: None = ...) -> hints.IClassFactory:
        ...
    
    @overload
    def CoGetClassObject(clsid: GUID, clsctx: Optional[int] = ..., pServerInfo: Optional[COSERVERINFO] = ..., interface: Type[_T_IUnknown] = ...) -> _T_IUnknown:
        ...
    
def CoGetClassObject(clsid: GUID, clsctx: Optional[int] = ..., pServerInfo: Optional[COSERVERINFO] = ..., interface: Optional[Type[IUnknown]] = ...) -> IUnknown:
    ...

@overload
def GetActiveObject(clsid: GUID, interface: None = ...) -> IUnknown:
    ...

@overload
def GetActiveObject(clsid: GUID, interface: Type[_T_IUnknown]) -> _T_IUnknown:
    ...

def GetActiveObject(clsid: GUID, interface: Optional[Type[IUnknown]] = ...) -> IUnknown:
    """Retrieves a pointer to a running object"""
    ...

class MULTI_QI(Structure):
    _fields_ = ...
    if TYPE_CHECKING:
        pIID: GUID
        pItf: _Pointer[c_void_p]
        hr: HRESULT
        ...


class _COAUTHIDENTITY(Structure):
    _fields_ = ...


COAUTHIDENTITY = _COAUTHIDENTITY
class _COAUTHINFO(Structure):
    _fields_ = ...


COAUTHINFO = _COAUTHINFO
class _COSERVERINFO(Structure):
    _fields_ = ...
    if TYPE_CHECKING:
        dwReserved1: int
        pwszName: Optional[str]
        pAuthInfo: _COAUTHINFO
        dwReserved2: int
        ...


_oleaut32 = ...
REFCLSID = ...
_GetActiveObject = ...
_ole32 = ...
COSERVERINFO = _COSERVERINFO
_CoGetClassObject = ...
_CoCreateInstance = ...
_CoCreateInstanceEx = ...
class tagBIND_OPTS(Structure):
    _fields_ = ...


BIND_OPTS = tagBIND_OPTS
_CoGetObject = ...
class tagBIND_OPTS2(Structure):
    _fields_ = ...


BINDOPTS2 = tagBIND_OPTS2
class _SEC_WINNT_AUTH_IDENTITY(Structure):
    _fields_ = ...


SEC_WINNT_AUTH_IDENTITY = _SEC_WINNT_AUTH_IDENTITY
class _SOLE_AUTHENTICATION_INFO(Structure):
    _fields_ = ...


SOLE_AUTHENTICATION_INFO = _SOLE_AUTHENTICATION_INFO
class _SOLE_AUTHENTICATION_LIST(Structure):
    _fields_ = ...


SOLE_AUTHENTICATION_LIST = _SOLE_AUTHENTICATION_LIST
@overload
def CoCreateInstanceEx(clsid: GUID, interface: None = ..., clsctx: Optional[int] = ..., machine: Optional[str] = ..., pServerInfo: Optional[COSERVERINFO] = ...) -> IUnknown:
    ...

@overload
def CoCreateInstanceEx(clsid: GUID, interface: Type[_T_IUnknown], clsctx: Optional[int] = ..., machine: Optional[str] = ..., pServerInfo: Optional[COSERVERINFO] = ...) -> _T_IUnknown:
    ...

def CoCreateInstanceEx(clsid: GUID, interface: Optional[Type[IUnknown]] = ..., clsctx: Optional[int] = ..., machine: Optional[str] = ..., pServerInfo: Optional[COSERVERINFO] = ...) -> IUnknown:
    """The basic windows api to create a COM class object and return a
    pointer to an interface, possibly on another machine.

    Passing both "machine" and "pServerInfo" results in a ValueError.

    """
    ...

