"""
This type stub file was generated by pyright.
"""

import decimal
import comtypes
import comtypes.patcher
from ctypes import *
from ctypes import Array as _CArrayType, _CDataType, _Pointer
from ctypes.wintypes import DWORD, LONG
from typing import Any, ClassVar, Dict, List, Optional, TYPE_CHECKING, Type
from comtypes import IUnknown, hints
from comtypes._memberspec import _DispMemberSpec

if TYPE_CHECKING:
    ...
else:
    ...
LCID = DWORD
DISPID = LONG
SCODE = LONG
VARTYPE = c_ushort
tagINVOKEKIND = c_int
INVOKE_FUNC = ...
INVOKE_PROPERTYGET = ...
INVOKE_PROPERTYPUT = ...
INVOKE_PROPERTYPUTREF = ...
INVOKEKIND = tagINVOKEKIND
IID_NULL = ...
riid_null = ...
_com_null_date = ...
VARENUM = c_int
VT_EMPTY = ...
VT_NULL = ...
VT_I2 = ...
VT_I4 = ...
VT_R4 = ...
VT_R8 = ...
VT_CY = ...
VT_DATE = ...
VT_BSTR = ...
VT_DISPATCH = ...
VT_ERROR = ...
VT_BOOL = ...
VT_VARIANT = ...
VT_UNKNOWN = ...
VT_DECIMAL = ...
VT_I1 = ...
VT_UI1 = ...
VT_UI2 = ...
VT_UI4 = ...
VT_I8 = ...
VT_UI8 = ...
VT_INT = ...
VT_UINT = ...
VT_VOID = ...
VT_HRESULT = ...
VT_PTR = ...
VT_SAFEARRAY = ...
VT_CARRAY = ...
VT_USERDEFINED = ...
VT_LPSTR = ...
VT_LPWSTR = ...
VT_RECORD = ...
VT_INT_PTR = ...
VT_UINT_PTR = ...
VT_FILETIME = ...
VT_BLOB = ...
VT_STREAM = ...
VT_STORAGE = ...
VT_STREAMED_OBJECT = ...
VT_STORED_OBJECT = ...
VT_BLOB_OBJECT = ...
VT_CF = ...
VT_CLSID = ...
VT_VERSIONED_STREAM = ...
VT_BSTR_BLOB = ...
VT_VECTOR = ...
VT_ARRAY = ...
VT_BYREF = ...
VT_RESERVED = ...
VT_ILLEGAL = ...
VT_ILLEGALMASKED = ...
VT_TYPEMASK = ...
class tagCY(Structure):
    _fields_ = ...


CY = tagCY
CURRENCY = CY
class tagDEC(Structure):
    _fields_ = ...
    def as_decimal(self) -> decimal.Decimal:
        """Convert a tagDEC struct to Decimal.

        See http://msdn.microsoft.com/en-us/library/cc234586.aspx for the tagDEC
        specification.

        """
        ...
    


DECIMAL = tagDEC
class tagVARIANT(Structure):
    if TYPE_CHECKING:
        vt: int
        _: U_VARIANT1.__tagVARIANT.U_VARIANT2
        null: ClassVar[VARIANT]
        empty: ClassVar[VARIANT]
        missing: ClassVar[VARIANT]
        ...
    class U_VARIANT1(Union):
        class __tagVARIANT(Structure):
            class U_VARIANT2(Union):
                class _tagBRECORD(Structure):
                    _fields_ = ...
                
                
                _fields_ = ...
                _anonymous_ = ...
            
            
            _fields_ = ...
        
        
        _fields_ = ...
        _anonymous_ = ...
    
    
    _fields_ = ...
    _anonymous_ = ...
    def __init__(self, *args) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @classmethod
    def from_param(cls, value): # -> Self:
        ...
    
    def __setitem__(self, index, value): # -> None:
        ...
    
    def __getitem__(self, index): # -> Any | None:
        ...
    
    value = ...
    def __ctypes_from_outparam__(self): # -> Any | None:
        ...
    
    def ChangeType(self, typecode): # -> None:
        ...
    


VARIANT = tagVARIANT
VARIANTARG = VARIANT
_oleaut32_nohresult = ...
_SysAllocStringLen = ...
_oleaut32 = ...
_VariantChangeType = ...
_VariantClear = ...
_VariantCopy = ...
_VariantCopyInd = ...
v = VARIANT.missing = VARIANT()
@comtypes.patcher.Patch(POINTER(VARIANT))
class _:
    @classmethod
    def from_param(cls, arg): # -> _Pointer[Any] | _CArgObject | Array[Any]:
        ...
    
    def __setitem__(self, index, value): # -> None:
        ...
    


class IEnumVARIANT(IUnknown):
    _iid_ = ...
    _idlflags_ = ...
    _dynamic = ...
    def __iter__(self): # -> Self:
        ...
    
    def __next__(self): # -> Any | datetime | _Pointer[IUnknown] | _Pointer[IDispatch] | <subclass of _Pointer[IDispatch] and _Dispatch> | _Dispatch | Dispatch | VARIANT | Sequence[Any] | None:
        ...
    
    def __getitem__(self, index): # -> Any | datetime | _Pointer[IUnknown] | _Pointer[IDispatch] | <subclass of _Pointer[IDispatch] and _Dispatch> | _Dispatch | Dispatch | VARIANT | Sequence[Any] | None:
        ...
    
    def Next(self, celt): # -> tuple[Any | datetime | _Pointer[IUnknown] | _Pointer[IDispatch] | <subclass of _Pointer[IDispatch] and _Dispatch> | _Dispatch | Dispatch | VARIANT | Sequence[Any] | None, int] | list[Any]:
        ...
    


class tagEXCEPINFO(Structure):
    if TYPE_CHECKING:
        wCode: int
        wReserved: int
        bstrSource: str
        bstrDescription: str
        bstrHelpFile: str
        dwHelpContext: int
        pvReserved: Optional[int]
        pfnDeferredFillIn: Optional[int]
        scode: int
        ...
    def __repr__(self): # -> str:
        ...
    


EXCEPINFO = tagEXCEPINFO
class tagDISPPARAMS(Structure):
    if TYPE_CHECKING:
        rgvarg: _CArrayType[VARIANT]
        rgdispidNamedArgs: _Pointer[DISPID]
        cArgs: int
        cNamedArgs: int
        ...
    _fields_ = ...
    def __del__(self): # -> None:
        ...
    


DISPPARAMS = tagDISPPARAMS
DISPID_VALUE = ...
DISPID_UNKNOWN = ...
DISPID_PROPERTYPUT = ...
DISPID_NEWENUM = ...
DISPID_EVALUATE = ...
DISPID_CONSTRUCTOR = ...
DISPID_DESTRUCTOR = ...
DISPID_COLLECT = ...
class IDispatch(IUnknown):
    _disp_methods_: ClassVar[List[_DispMemberSpec]]
    _iid_ = ...
    _methods_ = ...
    if TYPE_CHECKING:
        def GetTypeInfoCount(self) -> int:
            ...
        
    def GetTypeInfo(self, index: int, lcid: int = ...) -> hints.ITypeInfo:
        """Return type information.  Index 0 specifies typeinfo for IDispatch"""
        ...
    
    def GetIDsOfNames(self, *names: str, **kw: Any) -> List[int]:
        """Map string names to integer ids."""
        ...
    
    def Invoke(self, dispid: int, *args: Any, **kw: Any) -> Any:
        """Invoke a method or property."""
        ...
    


_arraycode_to_vartype = ...
_ctype_to_vartype: Dict[Type[_CDataType], int] = ...
_vartype_to_ctype: Dict[int, Type[_CDataType]] = ...
__known_symbols__ = ...
