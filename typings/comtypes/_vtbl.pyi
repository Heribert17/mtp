"""
This type stub file was generated by pyright.
"""

import comtypes
from ctypes import Structure, _FuncPointer
from typing import Any, Callable, Dict, Optional, Sequence, TYPE_CHECKING, Tuple, Type, Union as _UnionT
from comtypes import GUID, IUnknown, hints
from comtypes._memberspec import _ComIdlFlags, _DispIdlFlags

if TYPE_CHECKING:
    ...
logger = ...
_debug = ...
_warning = ...
_error = ...
class E_NotImplemented(Exception):
    """COM method is not implemented"""
    ...


def HRESULT_FROM_WIN32(errcode: Optional[int]) -> int:
    "Convert a Windows error code into a HRESULT value."
    ...

def winerror(exc: Exception) -> int:
    """Return the windows error code from a WindowsError or COMError
    instance."""
    ...

def catch_errors(obj: hints.COMObject, mth: Callable[..., Any], paramflags: Optional[Tuple[hints.ParamFlagType, ...]], interface: Type[IUnknown], mthname: str) -> Callable[..., Any]:
    ...

def hack(inst: hints.COMObject, mth: Callable[..., Any], paramflags: Optional[Tuple[hints.ParamFlagType, ...]], interface: Type[IUnknown], mthname: str) -> Callable[..., Any]:
    ...

class _MethodFinder:
    def __init__(self, inst: hints.COMObject) -> None:
        ...
    
    def get_impl(self, interface: Type[IUnknown], mthname: str, paramflags: Optional[Tuple[hints.ParamFlagType, ...]], idlflags: _UnionT[_ComIdlFlags, _DispIdlFlags]) -> Callable[..., Any]:
        ...
    
    def find_method(self, fq_name: str, mthname: str) -> Callable[..., Any]:
        ...
    
    def find_impl(self, interface: Type[IUnknown], mthname: str, paramflags: Optional[Tuple[hints.ParamFlagType, ...]], idlflags: _UnionT[_ComIdlFlags, _DispIdlFlags]) -> Optional[Callable[..., Any]]:
        ...
    
    def setter(self, propname: str) -> Callable[[Any], Any]:
        ...
    
    def getter(self, propname: str) -> Callable[[], Any]:
        ...
    


_vtbl_types: Dict[Tuple[Tuple[str, Type[_FuncPointer]], ...], Type[Structure]] = ...
def create_vtbl_mapping(itf: Type[IUnknown], finder: _MethodFinder) -> Tuple[Sequence[GUID], Structure]:
    ...

def create_dispimpl(itf: Type[IUnknown], finder: _MethodFinder) -> Dict[Tuple[comtypes.dispid, int], Callable[..., Any]]:
    ...

