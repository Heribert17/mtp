"""
This type stub file was generated by pyright.
"""

import comtypes
from typing import Any, Callable, Iterator, Literal, NamedTuple, Optional, TYPE_CHECKING, Tuple, Type, Union as _UnionT
from ctypes import _CDataType
from comtypes import hints

if TYPE_CHECKING:
    ...
else:
    ...
DISPATCH_METHOD = ...
DISPATCH_PROPERTYGET = ...
DISPATCH_PROPERTYPUT = ...
DISPATCH_PROPERTYPUTREF = ...
PARAMFLAG_NONE = ...
PARAMFLAG_FIN = ...
PARAMFLAG_FOUT = ...
PARAMFLAG_FLCID = ...
PARAMFLAG_FRETVAL = ...
PARAMFLAG_FOPT = ...
PARAMFLAG_FHASDEFAULT = ...
PARAMFLAG_FHASCUSTDATA = ...
_PARAMFLAGS = ...
_NOTHING = ...
if TYPE_CHECKING:
    _VarFlags = Tuple[str, ...]
    _VarFlagsWithDispIdHelpstr = Tuple["dispid", "helpstring", hints.Unpack[_VarFlags]]
    _VarFlagsWithDispId = Tuple["dispid", hints.Unpack[_VarFlags]]
    _VarFlagsWithHelpstr = Tuple["helpstring", hints.Unpack[_VarFlags]]
    _DispIdlFlags = _UnionT[_VarFlagsWithDispIdHelpstr, _VarFlagsWithDispId]
    _ComIdlFlags = _UnionT[_VarFlags, _VarFlagsWithHelpstr]
class _ComMemberSpec(NamedTuple):
    """Specifier for a slot of COM method or property."""
    restype: Optional[Type[_CDataType]]
    name: str
    argtypes: Tuple[Type[_CDataType], ...]
    paramflags: Optional[Tuple[hints.ParamFlagType, ...]]
    idlflags: _UnionT[_ComIdlFlags, _DispIdlFlags]
    doc: Optional[str]
    def is_prop(self) -> bool:
        ...
    


class _DispMemberSpec(NamedTuple):
    """Specifier for a slot of dispinterface method or property."""
    what: Literal["DISPMETHOD", "DISPPROPERTY"]
    name: str
    idlflags: _DispIdlFlags
    restype: Optional[Type[_CDataType]]
    argspec: Tuple[hints.ArgSpecElmType, ...]
    @property
    def memid(self) -> int:
        ...
    
    def is_prop(self) -> bool:
        ...
    


_MemberSpec = _UnionT[_ComMemberSpec, _DispMemberSpec]
class helpstring(str):
    "Specifies the helpstring for a COM method or property."
    ...


class defaultvalue:
    "Specifies the default value for parameters marked optional."
    def __init__(self, value) -> None:
        ...
    


class dispid(int):
    "Specifies the DISPID of a method or property."
    ...


def STDMETHOD(restype, name, argtypes=...) -> _ComMemberSpec:
    "Specifies a COM method slot without idlflags"
    ...

def DISPMETHOD(idlflags, restype, name, *argspec) -> _DispMemberSpec:
    "Specifies a method of a dispinterface"
    ...

def DISPPROPERTY(idlflags, proptype, name) -> _DispMemberSpec:
    "Specifies a property of a dispinterface"
    ...

def COMMETHOD(idlflags, restype, methodname, *argspec) -> _ComMemberSpec:
    """Specifies a COM method slot with idlflags.

    XXX should explain the sematics of the arguments.
    """
    ...

_PropFunc = Optional[Callable[..., Any]]
_DocType = Optional[str]
class PropertyMapping:
    def __init__(self) -> None:
        ...
    
    def add_propget(self, name: str, doc: _DocType, nargs: int, func: Callable[..., Any]) -> None:
        ...
    
    def add_propput(self, name: str, doc: _DocType, nargs: int, func: Callable[..., Any]) -> None:
        ...
    
    def add_propputref(self, name: str, doc: _DocType, nargs: int, func: Callable[..., Any]) -> None:
        ...
    
    def __iter__(self) -> Iterator[Tuple[str, _DocType, int, _PropFunc, _PropFunc]]:
        ...
    


class PropertyGenerator:
    def __init__(self, cls_name: str) -> None:
        ...
    
    def add(self, m: _MemberSpec, func: Callable[..., Any]) -> None:
        """Adds member spec and func to mapping."""
        ...
    
    def __iter__(self) -> Iterator[Tuple[str, _UnionT[property, named_property]]]:
        ...
    
    def to_propget_keys(self, m: _MemberSpec) -> Tuple[str, _DocType, int]:
        ...
    
    def to_propput_keys(self, m: _MemberSpec) -> Tuple[str, _DocType, int]:
        ...
    
    def to_propputref_keys(self, m: _MemberSpec) -> Tuple[str, _DocType, int]:
        ...
    


class ComPropertyGenerator(PropertyGenerator):
    def to_propget_keys(self, m: _ComMemberSpec) -> Tuple[str, _DocType, int]:
        ...
    
    def to_propput_keys(self, m: _ComMemberSpec) -> Tuple[str, _DocType, int]:
        ...
    
    def to_propputref_keys(self, m: _ComMemberSpec) -> Tuple[str, _DocType, int]:
        ...
    


class DispPropertyGenerator(PropertyGenerator):
    def to_propget_keys(self, m: _DispMemberSpec) -> Tuple[str, _DocType, int]:
        ...
    
    def to_propput_keys(self, m: _DispMemberSpec) -> Tuple[str, _DocType, int]:
        ...
    
    def to_propputref_keys(self, m: _DispMemberSpec) -> Tuple[str, _DocType, int]:
        ...
    


class ComMemberGenerator:
    def __init__(self, cls_name: str, vtbl_offset: int, iid: comtypes.GUID) -> None:
        ...
    
    def add(self, m: _ComMemberSpec) -> None:
        ...
    
    def methods(self): # -> Iterator[Tuple[str, Callable[..., Any], Callable[..., Any], bool]]:
        ...
    
    def properties(self): # -> Iterator[Tuple[str, property | named_property]]:
        ...
    


class DispMemberGenerator:
    def __init__(self, cls_name: str) -> None:
        ...
    
    def add(self, m: _DispMemberSpec) -> None:
        ...
    
    def items(self): # -> Iterator[Tuple[str, Callable[..., Any] | property, bool]]:
        ...
    
    def properties(self): # -> Iterator[Tuple[str, property | named_property]]:
        ...
    


class bound_named_property:
    def __init__(self, name, fget, fset, instance) -> None:
        ...
    
    def __getitem__(self, index):
        ...
    
    def __call__(self, *args):
        ...
    
    def __setitem__(self, index, value): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __iter__(self):
        """Explicitly disallow iteration."""
        ...
    


class named_property:
    def __init__(self, name, fget=..., fset=..., doc=...) -> None:
        ...
    
    def __get__(self, instance, owner=...): # -> Self | bound_named_property:
        ...
    
    def __set__(self, instance):
        ...
    
    def __repr__(self): # -> str:
        ...
    


