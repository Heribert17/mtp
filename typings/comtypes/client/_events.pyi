"""
This type stub file was generated by pyright.
"""

from ctypes import Structure
from typing import Any, Callable, Optional, Type, Union as _UnionT
from comtypes import COMObject, IUnknown
from comtypes._comobject import _MethodFinder
from comtypes.connectionpoints import IConnectionPoint

logger = ...
class SECURITY_ATTRIBUTES(Structure):
    _fields_ = ...


_ole32 = ...
_CoWaitForMultipleHandles = ...
_kernel32 = ...
_CreateEventA = ...
_SetEvent = ...
PHANDLER_ROUTINE = ...
_SetConsoleCtrlHandler = ...
_CloseHandle = ...
_ReceiverType = _UnionT[COMObject, IUnknown]
class _AdviseConnection:
    cp: Optional[IConnectionPoint]
    cookie: Optional[int]
    receiver: Optional[_ReceiverType]
    def __init__(self, source: IUnknown, interface: Type[IUnknown], receiver: _ReceiverType) -> None:
        ...
    
    def disconnect(self) -> None:
        ...
    
    def __del__(self) -> None:
        ...
    


def FindOutgoingInterface(source: IUnknown) -> Type[IUnknown]:
    """XXX Describe the strategy that is used..."""
    ...

def find_single_connection_interface(source): # -> type[IUnknown] | None:
    ...

def report_errors(func: Callable[..., Any]) -> Callable[..., Any]:
    ...

class _SinkMethodFinder(_MethodFinder):
    """Special MethodFinder, for finding and decorating event handler
    methods.  Looks for methods on two objects. Also decorates the
    event handlers with 'report_errors' which will print exceptions in
    event handlers.
    """
    def __init__(self, inst: COMObject, sink: Any) -> None:
        ...
    
    def find_method(self, fq_name: str, mthname: str) -> Callable[..., Any]:
        ...
    


def CreateEventReceiver(interface: Type[IUnknown], handler: Any) -> COMObject:
    class Sink(COMObject):
        ...
    
    

def GetEvents(source: IUnknown, sink: Any, interface: Optional[Type[IUnknown]] = ...) -> _AdviseConnection:
    """Receive COM events from 'source'.  Events will call methods on
    the 'sink' object.  'interface' is the source interface to use.
    """
    ...

class EventDumper:
    """Universal sink for COM events."""
    def __getattr__(self, name: str) -> Callable[..., Any]:
        "Create event handler methods on demand"
        ...
    


def ShowEvents(source: IUnknown, interface: Optional[Type[IUnknown]] = ...) -> _AdviseConnection:
    """Receive COM events from 'source'.  A special event sink will be
    used that first prints the names of events that are found in the
    outgoing interface, and will also print out the events when they
    are fired.
    """
    ...

_handles_type = ...
CTRL_C_EVENT = ...
CTRL_BREAK_EVENT = ...
CTRL_CLOSE_EVENT = ...
CTRL_LOGOFF_EVENT = ...
CTRL_SHUTDOWN_EVENT = ...
COWAIT_DEFAULT = ...
COWAIT_WAITALL = ...
COWAIT_ALERTABLE = ...
COWAIT_INPUTAVAILABLE = ...
COWAIT_DISPATCH_CALLS = ...
COWAIT_DISPATCH_WINDOW_MESSAGES = ...
def PumpEvents(timeout: Any) -> None:
    """This following code waits for 'timeout' seconds in the way
    required for COM, internally doing the correct things depending
    on the COM appartment of the current thread.  It is possible to
    terminate the message loop by pressing CTRL+C, which will raise
    a KeyboardInterrupt.
    """
    ...

