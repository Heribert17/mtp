"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional, TYPE_CHECKING, Type, TypeVar, Union as _UnionT, overload
from comtypes import COSERVERINFO, CoClass, GUID, IUnknown, hints

if TYPE_CHECKING:
    ...
_T_IUnknown = TypeVar("_T_IUnknown", bound=IUnknown)
logger = ...
if TYPE_CHECKING:
    @overload
    def GetClassObject(progid: _UnionT[str, Type[CoClass], GUID], clsctx: Optional[int] = ..., pServerInfo: Optional[COSERVERINFO] = ..., interface: None = ...) -> hints.IClassFactory:
        ...
    
    @overload
    def GetClassObject(progid: _UnionT[str, Type[CoClass], GUID], clsctx: Optional[int] = ..., pServerInfo: Optional[COSERVERINFO] = ..., interface: Type[_T_IUnknown] = ...) -> _T_IUnknown:
        ...
    
def GetClassObject(progid: _UnionT[str, Type[CoClass], GUID], clsctx: Optional[int] = ..., pServerInfo: Optional[COSERVERINFO] = ..., interface: Optional[Type[IUnknown]] = ...) -> IUnknown:
    """Create and return the class factory for a COM object.

    'clsctx' specifies how to create the object, use the CLSCTX_... constants.
    'pServerInfo', if used, must be a pointer to a comtypes.COSERVERINFO instance
    'interface' may be used to request an interface other than IClassFactory
    """
    ...

@overload
def CreateObject(progid: _UnionT[str, Type[CoClass], GUID]) -> Any:
    ...

@overload
def CreateObject(progid: _UnionT[str, Type[CoClass], GUID], clsctx: Optional[int] = ..., machine: Optional[str] = ..., interface: Optional[Type[_T_IUnknown]] = ..., dynamic: bool = ..., pServerInfo: Optional[COSERVERINFO] = ...) -> _T_IUnknown:
    ...

def CreateObject(progid: _UnionT[str, Type[CoClass], GUID], clsctx: Optional[int] = ..., machine: Optional[str] = ..., interface: Optional[Type[IUnknown]] = ..., dynamic: bool = ..., pServerInfo: Optional[COSERVERINFO] = ...) -> Any:
    """Create a COM object from 'progid', and try to QueryInterface()
    it to the most useful interface, generating typelib support on
    demand.  A pointer to this interface is returned.

    'progid' may be a string like "InternetExplorer.Application",
       a string specifying a clsid, a GUID instance, or an object with
       a _clsid_ attribute which should be any of the above.
    'clsctx' specifies how to create the object, use the CLSCTX_... constants.
    'machine' allows to specify a remote machine to create the object on.
    'interface' allows to force a certain interface
    'dynamic=True' will return a dynamic dispatch object
    'pServerInfo', if used, must be a pointer to a comtypes.COSERVERINFO instance
        This supercedes 'machine'.

    You can also later request to receive events with GetEvents().
    """
    ...

@overload
def CoGetObject(displayname: str, interface: Type[_T_IUnknown]) -> _T_IUnknown:
    ...

@overload
def CoGetObject(displayname: str, interface: None = ..., dynamic: bool = ...) -> Any:
    ...

def CoGetObject(displayname: str, interface: Optional[Type[IUnknown]] = ..., dynamic: bool = ...) -> Any:
    """Create an object by calling CoGetObject(displayname).

    Additional parameters have the same meaning as in CreateObject().
    """
    ...

