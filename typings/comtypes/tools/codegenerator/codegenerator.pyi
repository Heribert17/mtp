"""
This type stub file was generated by pyright.
"""

import contextlib
import io
from typing import Any, Iterator, Literal, Optional, Sequence, Union as _UnionT
from comtypes.tools import typedesc

version = ...
logger = ...
__warn_on_munge__ = ...
_InterfaceTypeDesc = _UnionT[typedesc.ComInterface, typedesc.ComInterfaceHead, typedesc.ComInterfaceBody, typedesc.DispInterface, typedesc.DispInterfaceHead, typedesc.DispInterfaceBody,]
class CodeGenerator:
    def __init__(self, known_symbols=..., known_interfaces=...) -> None:
        ...
    
    @contextlib.contextmanager
    def adjust_blank(self, item: Literal["assert", "attribute", "class", "comment", "variable"]) -> Iterator[io.StringIO]:
        ...
    
    def generate(self, item): # -> None:
        ...
    
    def generate_all(self, items): # -> None:
        ...
    
    def generate_wrapper_code(self, tdescs: Sequence[Any], filename: Optional[str]) -> str:
        """Returns the code for the COM type library wrapper module.

        The returned `Python` code string is containing definitions of interfaces,
        coclasses, constants, and structures.

        The module will have long name that is derived from the type library guid, lcid
        and version numbers.
        Such as `comtypes.gen._xxxxxxxx_xxxx_xxxx_xxxx_xxxxxxxxxxxx_l_M_m`.
        """
        ...
    
    def generate_friendly_code(self, modname: str) -> str:
        """Returns the code for the COM type library friendly module.

        The returned `Python` code string is containing `from {modname} import
        DefinedInWrapper, ...` and `__all__ = ['DefinedInWrapper', ...]`
        The `modname` is the wrapper module name like `comtypes.gen._xxxx..._x_x_x`.

        The module will have shorter name that is derived from the type library name.
        Such as "comtypes.gen.stdole" and "comtypes.gen.Excel".
        """
        ...
    
    def need_VARIANT_imports(self, value): # -> None:
        ...
    
    def ArrayType(self, tp: typedesc.ArrayType) -> None:
        ...
    
    def EnumValue(self, tp: typedesc.EnumValue) -> None:
        ...
    
    def Enumeration(self, tp: typedesc.Enumeration) -> None:
        ...
    
    def Typedef(self, tp: typedesc.Typedef) -> None:
        ...
    
    def FundamentalType(self, item: typedesc.FundamentalType) -> None:
        ...
    
    def StructureHead(self, head: typedesc.StructureHead) -> None:
        ...
    
    def Structure(self, struct: typedesc.Structure) -> None:
        ...
    
    def Union(self, union: typedesc.Union) -> None:
        ...
    
    def StructureBody(self, body: typedesc.StructureBody) -> None:
        ...
    
    def TypeLib(self, lib: typedesc.TypeLib) -> None:
        ...
    
    def External(self, ext: typedesc.External) -> None:
        ...
    
    def Constant(self, tp: typedesc.Constant) -> None:
        ...
    
    def SAFEARRAYType(self, sa: typedesc.SAFEARRAYType) -> None:
        ...
    
    def PointerType(self, tp: typedesc.PointerType) -> None:
        ...
    
    def CoClass(self, coclass: typedesc.CoClass) -> None:
        ...
    
    def ComInterface(self, itf: typedesc.ComInterface) -> None:
        ...
    
    def ComInterfaceHead(self, head: typedesc.ComInterfaceHead) -> None:
        ...
    
    def ComInterfaceBody(self, body: typedesc.ComInterfaceBody) -> None:
        ...
    
    def DispInterface(self, itf: typedesc.DispInterface) -> None:
        ...
    
    def DispInterfaceHead(self, head: typedesc.DispInterfaceHead) -> None:
        ...
    
    def DispInterfaceBody(self, body: typedesc.DispInterfaceBody) -> None:
        ...
    
    def add_ComMth_requirements(self, m: typedesc.ComMethod, isdual: bool) -> None:
        ...
    
    def add_DispMth_requirements(self, m: typedesc.DispMethod) -> None:
        ...
    
    def add_DispProp_requirements(self, prop: typedesc.DispProperty) -> None:
        ...
    


