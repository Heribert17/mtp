"""
This type stub file was generated by pyright.
"""

import abc
from typing import Any, Generic, Iterable, List, Optional, Protocol, Sequence, Tuple, TypeVar
from comtypes.tools import typedesc

class _MethodTypeDesc(Protocol):
    arguments: List[Tuple[Any, str, List[str], Optional[Any]]]
    idlflags: List[str]
    name: str
    ...


_T_MTD = TypeVar("_T_MTD", bound=_MethodTypeDesc)
class _MethodAnnotator(abc.ABC, Generic[_T_MTD]):
    def __init__(self, method: _T_MTD) -> None:
        ...
    
    @property
    def inarg_specs(self) -> Sequence[Tuple[Any, str, Optional[Any]]]:
        ...
    
    @abc.abstractmethod
    def getvalue(self, name: str) -> str:
        ...
    


_CatMths = Tuple[str, Optional[_T_MTD], Optional[_T_MTD], Optional[_T_MTD], Optional[_T_MTD]]
class _MethodsAnnotator(abc.ABC, Generic[_T_MTD]):
    def __init__(self) -> None:
        ...
    
    @abc.abstractmethod
    def to_method_annotator(self, method: _T_MTD) -> _MethodAnnotator[_T_MTD]:
        ...
    
    def generate(self, members: Iterable[_T_MTD]) -> str:
        ...
    


class ComMethodAnnotator(_MethodAnnotator[typedesc.ComMethod]):
    def getvalue(self, name: str) -> str:
        ...
    


class ComMethodsAnnotator(_MethodsAnnotator[typedesc.ComMethod]):
    def to_method_annotator(self, m: typedesc.ComMethod) -> ComMethodAnnotator:
        ...
    


class ComInterfaceMembersAnnotator:
    def __init__(self, itf: typedesc.ComInterface) -> None:
        ...
    
    def generate(self) -> str:
        ...
    


class DispMethodAnnotator(_MethodAnnotator[typedesc.DispMethod]):
    def getvalue(self, name: str) -> str:
        ...
    


class DispMethodsAnnotator(_MethodsAnnotator[typedesc.DispMethod]):
    def to_method_annotator(self, m: typedesc.DispMethod) -> DispMethodAnnotator:
        ...
    


class DispInterfaceMembersAnnotator:
    def __init__(self, itf: typedesc.DispInterface) -> None:
        ...
    
    def generate(self) -> str:
        ...
    


