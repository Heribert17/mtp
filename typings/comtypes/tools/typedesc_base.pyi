"""
This type stub file was generated by pyright.
"""

from typing import Any, List, Optional, SupportsInt, Tuple, Union as _UnionT

class Argument:
    "a Parameter in the argument list of a callable (Function, Method, ...)"
    def __init__(self, atype, name) -> None:
        ...
    


class _HasArgs:
    def __init__(self) -> None:
        ...
    
    def add_argument(self, arg): # -> None:
        ...
    
    def iterArgTypes(self): # -> Generator[Any, Any, None]:
        ...
    
    def iterArgNames(self): # -> Generator[Any, Any, None]:
        ...
    
    def fixup_argtypes(self, typemap): # -> None:
        ...
    


class Alias:
    def __init__(self, name, alias, typ=...) -> None:
        ...
    


class Macro:
    def __init__(self, name, args, body) -> None:
        ...
    


class File:
    def __init__(self, name) -> None:
        ...
    


class Function(_HasArgs):
    location = ...
    def __init__(self, name, returns, attributes, extern) -> None:
        ...
    


class Constructor(_HasArgs):
    location = ...
    def __init__(self, name) -> None:
        ...
    


class OperatorFunction(_HasArgs):
    location = ...
    def __init__(self, name, returns) -> None:
        ...
    


class FunctionType(_HasArgs):
    location = ...
    def __init__(self, returns, attributes) -> None:
        ...
    


class Method(_HasArgs):
    location = ...
    def __init__(self, name, returns) -> None:
        ...
    


class FundamentalType:
    location = ...
    def __init__(self, name, size, align) -> None:
        ...
    


class PointerType:
    location = ...
    def __init__(self, typ, size, align) -> None:
        ...
    


class Typedef:
    location = ...
    def __init__(self, name, typ) -> None:
        ...
    


class ArrayType:
    location = ...
    def __init__(self, typ: Any, min: int, max: int) -> None:
        ...
    


class StructureHead:
    location = ...
    def __init__(self, struct: _Struct_Union_Base) -> None:
        ...
    


class StructureBody:
    location = ...
    def __init__(self, struct: _Struct_Union_Base) -> None:
        ...
    


class _Struct_Union_Base:
    name: str
    align: int
    members: List[_UnionT[Field, Method, Constructor]]
    bases: List[_Struct_Union_Base]
    artificial: Optional[Any]
    size: Optional[int]
    _recordinfo_: Tuple[str, int, int, int, str]
    location = ...
    def __init__(self) -> None:
        ...
    
    def get_body(self) -> StructureBody:
        ...
    
    def get_head(self) -> StructureHead:
        ...
    


class Structure(_Struct_Union_Base):
    def __init__(self, name: str, align: SupportsInt, members: List[Field], bases: List[Any], size: Optional[SupportsInt], artificial: Optional[Any] = ...) -> None:
        ...
    


class Union(_Struct_Union_Base):
    def __init__(self, name: str, align: SupportsInt, members: List[Field], bases: List[Any], size: Optional[SupportsInt], artificial: Optional[Any] = ...) -> None:
        ...
    


class Field:
    def __init__(self, name: str, typ: Any, bits: Optional[Any], offset: SupportsInt) -> None:
        ...
    


class CvQualifiedType:
    def __init__(self, typ, const, volatile) -> None:
        ...
    


class Enumeration:
    location = ...
    def __init__(self, name: str, size: SupportsInt, align: SupportsInt) -> None:
        ...
    
    def add_value(self, v: EnumValue) -> None:
        ...
    


class EnumValue:
    def __init__(self, name: str, value: int, enumeration: Enumeration) -> None:
        ...
    


class Variable:
    location = ...
    def __init__(self, name, typ, init=...) -> None:
        ...
    


