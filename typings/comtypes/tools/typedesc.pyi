"""
This type stub file was generated by pyright.
"""

from typing import Any, List, Optional, Sequence, Tuple, Union as _UnionT
from comtypes.tools.typedesc_base import *
from comtypes.typeinfo import ITypeLib, TLIBATTR

class TypeLib:
    def __init__(self, name: str, guid: str, major: int, minor: int, doc: Optional[str] = ...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class Constant:
    def __init__(self, name: str, typ: _UnionT[Typedef, FundamentalType], value: Any, doc: Optional[str]) -> None:
        ...
    


class External:
    def __init__(self, tlib: ITypeLib, name: str, size: int, align: int, docs: Optional[Tuple[str, Optional[str]]] = ...) -> None:
        ...
    
    def get_head(self) -> External:
        ...
    


class SAFEARRAYType:
    def __init__(self, typ: Any) -> None:
        ...
    


class ComMethod:
    def __init__(self, invkind: int, memid: int, name: str, returns: Any, idlflags: List[str], doc: Optional[str]) -> None:
        ...
    
    def add_argument(self, typ: Any, name: str, idlflags: List[str], default: Optional[Any]) -> None:
        ...
    


class DispMethod:
    def __init__(self, dispid: int, invkind: int, name: str, returns: Any, idlflags: List[str], doc: Optional[str]) -> None:
        ...
    
    def add_argument(self, typ: Any, name: str, idlflags: List[str], default: Optional[Any]) -> None:
        ...
    


class DispProperty:
    def __init__(self, dispid: int, name: str, typ: Any, idlflags: List[str], doc: Optional[Any]) -> None:
        ...
    


class DispInterfaceHead:
    def __init__(self, itf: DispInterface) -> None:
        ...
    


class DispInterfaceBody:
    def __init__(self, itf: DispInterface) -> None:
        ...
    


class DispInterface:
    def __init__(self, name: str, base: Any, iid: str, idlflags: List[str], doc: Optional[str]) -> None:
        ...
    
    def add_member(self, member: _UnionT[DispMethod, DispProperty]) -> None:
        ...
    
    def get_body(self) -> DispInterfaceBody:
        ...
    
    def get_head(self) -> DispInterfaceHead:
        ...
    


class ComInterfaceHead:
    def __init__(self, itf: ComInterface) -> None:
        ...
    


class ComInterfaceBody:
    def __init__(self, itf: ComInterface) -> None:
        ...
    


class ComInterface:
    def __init__(self, name: str, base: Optional[ComInterface], iid: str, idlflags: List[str], doc: Optional[str]) -> None:
        ...
    
    def extend_members(self, members: Sequence[ComMethod]) -> None:
        ...
    
    def get_body(self) -> ComInterfaceBody:
        ...
    
    def get_head(self) -> ComInterfaceHead:
        ...
    


_ImplTypeFlags = int
_Interface = _UnionT[ComInterface, DispInterface]
class CoClass:
    def __init__(self, name: str, clsid: str, idlflags: List[str], tlibattr: TLIBATTR, doc: Optional[str]) -> None:
        ...
    
    def add_interface(self, itf: _Interface, idlflags: _ImplTypeFlags) -> None:
        ...
    


_ImplementedInterfaces = Sequence[_Interface]
_SourceInterfaces = Sequence[_Interface]
def groupby_impltypeflags(seq: Sequence[Tuple[_Interface, _ImplTypeFlags]]) -> Tuple[_ImplementedInterfaces, _SourceInterfaces]:
    ...

