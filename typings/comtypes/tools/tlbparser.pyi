"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional
from comtypes import typeinfo
from comtypes.tools import typedesc

is_64bits = ...
def PTR(typ): # -> PointerType:
    ...

char_type = ...
uchar_type = ...
wchar_t_type = ...
short_type = ...
ushort_type = ...
int_type = ...
uint_type = ...
long_type = ...
ulong_type = ...
longlong_type = ...
ulonglong_type = ...
float_type = ...
double_type = ...
void_type = ...
BSTR_type = ...
SCODE_type = ...
VARIANT_BOOL_type = ...
HRESULT_type = ...
VARIANT_type = ...
IDISPATCH_type = ...
IUNKNOWN_type = ...
DECIMAL_type = ...
def midlSAFEARRAY(typ): # -> SAFEARRAYType:
    ...

CURRENCY_type = ...
DATE_type = ...
COMTYPES = ...
class Parser:
    tlib: typeinfo.ITypeLib
    items: Dict[str, Any]
    def make_type(self, tdesc: typeinfo.TYPEDESC, tinfo: typeinfo.ITypeInfo) -> Any:
        ...
    
    def ParseEnum(self, tinfo: typeinfo.ITypeInfo, ta: typeinfo.TYPEATTR) -> typedesc.Enumeration:
        ...
    
    def ParseRecord(self, tinfo: typeinfo.ITypeInfo, ta: typeinfo.TYPEATTR) -> typedesc.Structure:
        ...
    
    def ParseModule(self, tinfo: typeinfo.ITypeInfo, ta: typeinfo.TYPEATTR) -> None:
        ...
    
    def ParseInterface(self, tinfo: typeinfo.ITypeInfo, ta: typeinfo.TYPEATTR) -> Optional[typedesc.ComInterface]:
        ...
    
    def ParseDispatch(self, tinfo: typeinfo.ITypeInfo, ta: typeinfo.TYPEATTR) -> typedesc.DispInterface:
        ...
    
    def inv_kind(self, invkind: int) -> List[str]:
        ...
    
    def func_flags(self, flags: int) -> List[str]:
        ...
    
    def param_flags(self, flags: int) -> List[str]:
        ...
    
    def coclass_type_flags(self, flags: int) -> List[str]:
        ...
    
    def interface_type_flags(self, flags: int) -> List[str]:
        ...
    
    def var_flags(self, flags: int) -> List[str]:
        ...
    
    def ParseCoClass(self, tinfo: typeinfo.ITypeInfo, ta: typeinfo.TYPEATTR) -> typedesc.CoClass:
        ...
    
    def ParseAlias(self, tinfo: typeinfo.ITypeInfo, ta: typeinfo.TYPEATTR) -> typedesc.Typedef:
        ...
    
    def ParseUnion(self, tinfo: typeinfo.ITypeInfo, ta: typeinfo.TYPEATTR) -> typedesc.Union:
        ...
    
    def parse_typeinfo(self, tinfo: typeinfo.ITypeInfo) -> Any:
        ...
    
    def parse_LibraryDescription(self): # -> None:
        ...
    
    def parse(self): # -> Dict[str, Any]:
        ...
    


class TlbFileParser(Parser):
    "Parses a type library from a file"
    def __init__(self, path) -> None:
        ...
    


class TypeLibParser(Parser):
    def __init__(self, tlib) -> None:
        ...
    


def get_tlib_filename(tlib: typeinfo.ITypeLib) -> Optional[str]:
    ...

